{
  "swagger": "2.0",
  "info": {
    "description": "This API is used to confirm match bookings for the AberFitness Ladder micro-service.",
    "version": "1.6.0",
    "title": "Booking-Facilities",
    "contact": {
      "name": "Robert",
      "email": "rdm10@aber.ac.uk"
    }
  },
  "tags": [
    {
      "name": "Status",
      "description": "Bookings CRUD operations."
    },
    {
      "name": "Booking",
      "description": "Bookings CRUD operations."
    },
    {
      "name": "Factilities",
      "description": "Operation for retrieving a list of available facilites."
    },
    {
      "name": "Sports",
      "description": "Operation for retrieving a list of sports from a venue."
    }
  ],
  "paths": {
    "/api/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Check status of the microservice.",
        "operationId": "checkStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          }
        }
      }
    },
    "/api/booking/{venueId}/{sportId}": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Add a new match booking using Bookings API. Specify venue and sport in route. Facility will be choosen",
        "operationId": "addBooking",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "venueId",
            "description": "Id of requested venue.",
            "type": "integer",
            "format": "int64",
            "required": true
          },
          {
            "in": "path",
            "name": "sportId",
            "description": "Id of requested sport.",
            "type": "integer",
            "format": "int64",
            "required": true
          },
          {
            "in": "body",
            "name": "booking object",
            "description": "Booking object to be added.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "405": {
            "description": "Invalid input."
          },
          "409": {
            "description": "Timeslot no longer available."
          }
        }
      }
    },
    "/api/booking/{bookingId}": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Get booking object.",
        "operationId": "getBooking",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "bookingId to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "400": {
            "description": "Invalid bookingId supplied."
          },
          "404": {
            "description": "Booking not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Booking"
        ],
        "summary": "Deletes a booking.",
        "operationId": "deleteBooking",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "bookingId to delete.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Invalid ID supplied."
          },
          "404": {
            "description": "Booking not found."
          }
        }
      }
    },
    "/api/booking/{date}/{venueId}/{sportId}": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Gets list of available times for the given day.",
        "operationId": "getTimesForDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "description": "Date of requested booking.",
            "required": true,
            "type": "string"
          },
          {
            "name": "venueId",
            "in": "path",
            "description": "Venue of requested booking.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "sportId",
            "in": "path",
            "description": "Sport of requested booking.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Time"
              }
            }
          },
          "400": {
            "description": "Invalid dateTime supplied."
          }
        }
      }
    },
    "/api/booking/update/{bookingId}/{venueId}/{sportId}": {
      "put": {
        "tags": [
          "Booking"
        ],
        "summary": "Update an existing booking. Specify the venue and sport in route. Facility will be choosen.",
        "operationId": "updateBooking",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "ID of booking to update.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "sportId",
            "in": "path",
            "description": "ID of request sport.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "venueId",
            "in": "path",
            "description": "ID of requested venue",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Booking object that needs to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Invalid ID supplied."
          },
          "404": {
            "description": "Booking not found."
          },
          "405": {
            "description": "Invalid input."
          },
          "409": {
            "description": "Timeslot no longer available."
          }
        }
      }
    },
    "/api/facilities": {
      "get": {
        "tags": [
          "Factilities"
        ],
        "summary": "Retrieve all available facilities.",
        "operationId": "getFacilities",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Facility"
              }
            }
          }
        }
      }
    },
    "/api/facilities/{venueId}/{sportId}": {
      "get": {
        "tags": [
          "Factilities"
        ],
        "summary": "Retrieve all facilities for specific venue and sport.",
        "operationId": "findFacilites",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "venueId",
            "in": "path",
            "description": "venueId of venue for facilities to be returned.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "sportId",
            "in": "path",
            "description": "sportId of sport for facilities to be returned.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Facility"
              }
            }
          },
          "400": {
            "description": "Invalid ID(s) supplied."
          },
          "404": {
            "description": "Facility not found."
          },
          "405": {
            "description": "Invalid input."
          }
        }
      }
    },
    "/api/sports/getSportsByVenue/{venueId}": {
      "get": {
        "tags": [
          "Sports"
        ],
        "summary": "Retrieve all sports that are available at a venue.",
        "operationId": "getSportByVenue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "venueId",
            "in": "path",
            "description": "venueId of venue for sports to be returned.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sport"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied."
          },
          "404": {
            "description": "Venue not found."
          },
          "405": {
            "description": "Invalid input."
          }
        }
      }
    }
  },
  "definitions": {
    "Time": {
      "type": "string",
      "example": "2018-07-16 09:00:00"
    },
    "Booking": {
      "type": "object",
      "required": [
        "bookingId",
        "bookingDateTime",
        "userId",
        "facility"
      ],
      "properties": {
        "bookingId": {
          "type": "integer",
          "format": "int64"
        },
        "bookingDateTime": {
          "type": "string",
          "example": "2018-07-16 09:00:00"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "facility": {
          "$ref": "#/definitions/Facility"
        }
      }
    },
    "Facility": {
      "type": "object",
      "required": [
        "facilityId",
        "facilityName",
        "venue",
        "sport",
        "isBlock"
      ],
      "properties": {
        "facilityId": {
          "type": "integer",
          "format": "int64"
        },
        "facilityName": {
          "type": "string",
          "example": "Swimming Pool"
        },
        "venue": {
          "$ref": "#/definitions/Venue"
        },
        "sport": {
          "$ref": "#/definitions/Sport"
        },
        "isBlock": {
          "type": "boolean"
        }
      }
    },
    "Venue": {
      "type": "object",
      "required": [
        "venueName",
        "venueId"
      ],
      "properties": {
        "venueId": {
          "type": "integer",
          "format": "int64"
        },
        "venueName": {
          "type": "string",
          "example": "The Old Sports College"
        }
      }
    },
    "Sport": {
      "type": "object",
      "required": [
        "sportName",
        "sportId"
      ],
      "properties": {
        "sportId": {
          "type": "integer",
          "format": "int64"
        },
        "sportName": {
          "type": "string",
          "example": "Swimming"
        }
      }
    }
  },
  "externalDocs": {
    "description": "GitHub Repository",
    "url": "https://github.com/sem5640-2018/booking-facilities"
  }
}